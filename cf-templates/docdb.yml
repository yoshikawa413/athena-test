---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DocDBUsername:
    Type: String
    Description: Username for the Amazon DocumentDB cluster
  DocDBPassword:
    Type: String
    Description: Password for the Amazon DocumentDB cluster
    NoEcho: true
    MinLength: 8
  DocDBInstanceType:
    Type: String
    Default: db.t3.medium

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '192.168.0.0/16'
    PublicOne:
      CIDR: '192.168.10.0/24'
    PrivateOne:
      CIDR: '192.168.100.0/24'
    PrivateTwo:
      CIDR: '192.168.101.0/24'
    PrivateThree:
      CIDR: '192.168.102.0/24'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicOne

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateOne

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateTwo

  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateThree

  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for DocumentDB
      DBSubnetGroupName: !Sub ${AWS::StackName}-SG-DocumentDB
      SubnetIds: 
         - !Ref PrivateSubnetOne
         - !Ref PrivateSubnetTwo
         - !Ref PrivateSubnetThree
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SG-DocumentDB

  DocumentDBCluster: 
    Type: AWS::DocDB::DBCluster
    Properties: 
      DBClusterIdentifier: !Sub ${AWS::StackName}-DocumentDB
      MasterUsername: !Ref DocDBUsername
      MasterUserPassword: !Ref DocDBPassword
      DBSubnetGroupName : !Ref DocumentDBSubnetGroup
      StorageEncrypted: yes
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DocumentDB
      VpcSecurityGroupIds: 
        - !GetAtt VPC.DefaultSecurityGroup
    DependsOn: VPC

  DocumentDBInstanceOne: 
    Type: AWS::DocDB::DBInstance
    Properties: 
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: !Ref DocDBInstanceType
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-DocumentDBInstance1

  # VPCS3Endpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcEndpointType: "Gateway"
  #     ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
  #     RouteTableIds:
  #       - ""
  #     VpcId: !Ref VPC

  DocdbJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "DocdbJobRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action: "glue:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action: "ec2:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action: "logs:*"
                Resource: "*"

  DocdbJobConnection:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        ConnectionProperties: {
          "CONNECTION_URL": !Sub "mongodb://${DocumentDBCluster.Endpoint}:27017",
          "USERNAME": !Ref DocDBUsername,
          "PASSWORD": !Ref DocDBPassword,
          "JDBC_ENFORCE_SSL": "true"
        }
        ConnectionType: "MONGODB"
        Name: "docdb-conn"
        PhysicalConnectionRequirements: 
          SecurityGroupIdList:
            - !GetAtt VPC.DefaultSecurityGroup
          SubnetId: !Ref PrivateSubnetThree

  DocdbJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://aws-glue-assets-${AWS::AccountId}-ap-northeast-1/scripts/test_json.py"
      # DefaultArguments:
      #   "--job-bookmark-option": "job-bookmark-enable"
      Connections:
        Connections:
          - !Ref DocdbJobConnection
      GlueVersion: 4.0
      WorkerType: "G.1X"
      NumberOfWorkers: 2
      # MaxCapacity: 2
      Timeout: 5
      ExecutionProperty:
        MaxConcurrentRuns: 1
      MaxRetries: 0
      Name: docdb-job
      Role: !Ref DocdbJobRole
