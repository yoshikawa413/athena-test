AWSTemplateFormatVersion: 2010-09-09
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub s3notification-test-bucket
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: hogehoge/aaa/
                  - Name: suffix
                    Value: .txt
            Function: !GetAtt TriggerLambda.Arn
  MyQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: "sample_queue"
  TriggerLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      RoleName: "trigger_lambda_role"
  TriggerLambdaRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: trigger_lambda_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - "sqs:*"
          Resource:
            - "*"
      Roles:
      - !Ref TriggerLambdaRole
  TriggerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          from multiprocessing import Process, Pipe
          from functools import reduce
          import time

          def f(conn):
            conn.send([42, None, 'hello'])
            time.sleep(1)
            conn.close()


          def lambda_handler(event, context):
            parent_connections = []
            processes = []

            for instance in range(2):
              parent_conn, child_conn = Pipe()
              parent_connections.append(parent_conn)
              process = Process(target=f, args=(child_conn,))
              processes.append(process)

            [p.start() for p in processes]
            [p.join() for p in processes]

            for conn in parent_connections:
              print(conn.recv()[0])
      FunctionName: "trigger_lambda"
      Handler: "index.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "TriggerLambdaRole.Arn"
      Runtime: python3.9
      Timeout: 300
  TriggerLambdaAsyncconfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      DestinationConfig:
          OnFailure:
            Destination: !GetAtt MyQueue.Arn
      FunctionName: !Ref TriggerLambda
      MaximumEventAgeInSeconds: 300
      MaximumRetryAttempts: 0
      Qualifier: '$LATEST'
  TriggerLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt 
        - TriggerLambda
        - Arn
      Principal: "s3.amazonaws.com"
      SourceArn: !Join 
                  - ""
                  - - "arn:aws:s3:::"
                    - !Sub s3notification-test-bucket
# Outputs:
#   BucketName:
#     Value: !Ref S3Bucket
#     Description: Name of the sample Amazon S3 bucket with a notification configuration.
